Глава 26: Интеграция GTK-приложений в Систему
=============================================

После того как ваше приложение на GTK успешно собрано и протестировано, вы можете сделать его ещё более удобным для запуска, добавив **ярлык** (или "лаунчер") в рабочую среду вашей операционной системы. Это позволит запускать приложение, как и любое другое установленное ПО — прямо из меню, с рабочего стола или через поиск.

В Linux (включая Raspberry Pi OS, Ubuntu и другие дистрибутивы) ярлыки приложений обычно реализуются с помощью специальных **файлов `.desktop`**. Эти файлы содержат метаданные о приложении, такие как его имя, описание, путь к исполняемому файлу, иконку, категорию и другие свойства.

---

Запуск GTK-приложения с ярлыка
------------------------------

Создание файла `.desktop`
~~~~~~~~~~~~~~~~~~~~~~~~~

1.  **Создайте файл `.desktop`**
    В вашем домашнем каталоге или прямо на рабочем столе (`~/Desktop`) создайте новый файл. Название файла обычно соответствует названию вашего приложения, с расширением `.desktop`. Например:

    .. code-block:: bash

        nano ~/Desktop/glade_example.desktop

2.  **Добавьте следующее содержимое:**

    .. code-block:: ini

        [Desktop Entry]
        Version=1.0
        Name=Пример Glade
        Comment=Мое первое GTK-приложение с Glade
        Exec=/home/Alex/myprg/25/glade_example
        Icon=/home/Alex/myprg/25/icon.png
        Terminal=false
        Type=Application
        Categories=Development;Utility;GUI;

     **Обязательно измените:**

    * **`Exec=`**: Это **полный путь** к вашему скомпилированному исполняемому файлу.
        * **Пример:** `Exec=/home/Alex/myprg/25/glade_example`
        * **Совет:** Для лучшей переносимости и во избежание жестких путей, если ваше приложение будет установлено в стандартную директорию (`/usr/local/bin` или `/usr/bin`), вы можете указать только имя файла: `Exec=glade_example`.
        * Если вы используете относительный путь или хотите, чтобы приложение запускалось в его текущей директории, можно добавить `Path=/home/Alex/myprg/25/` и `Exec=glade_example`. Однако, для простых приложений прямой путь обычно работает хорошо.

    * **`Icon=`**: (Необязательно, но очень рекомендуется) Это **полный путь** к PNG или SVG файлу иконки вашего приложения.
        * **Пример:** `Icon=/home/Alex/myprg/25/icon.png`
        * **Совет:** Для стандартных иконок системы или если вы установите свою иконку в системные пути (например, `/usr/share/icons/hicolor/scalable/apps/`), можно указать только имя иконки без расширения: `Icon=glade_example`.
        * **Создание иконки:** Вы можете нарисовать простую иконку в любом графическом редакторе (например, GIMP) и сохранить её в формате `.png` (рекомендуемые размеры: 48x48, 64x64, 128x128 пикселей).
    * **`Terminal=false`**: Это очень важное свойство для GTK-приложений. Оно указывает системе, что приложение **не требует запуска в терминале**. Если бы оно было `true`, при каждом запуске приложения открывалось бы отдельное окно терминала, что нежелательно для графического интерфейса.
    * **`Categories=`**: Помогает системе рабочего стола правильно классифицировать ваше приложение в меню. Можете добавить или изменить категории по вкусу (например, `Development;Utility;Education;`). `GUI;` часто используется для приложений с графическим интерфейсом.

3.  **Сделайте файл исполняемым:**
    После сохранения файла `.desktop` необходимо сделать его исполняемым. Это сообщит системе, что это не просто текстовый файл, а файл, который можно "запустить".

    .. code-block:: bash

        chmod +x ~/Desktop/glade_example.desktop

4.  **Проверьте ярлык на рабочем столе:**
    * Если вы сохранили файл в `~/Desktop`, вы должны увидеть его иконку. При первом клике может появиться диалоговое окно с вопросом, что вы хотите сделать с файлом (например, "Execute File").
    * **При первом запуске на рабочем столе (особенно в Raspberry Pi OS/LXDE/PIXEL):** Система безопасности может спросить, хотите ли вы "выполнить" файл. Это происходит потому, что файлы `.desktop`, созданные напрямую на рабочем столе, часто требуют явного подтверждения пользователя. Выберите опцию "Execute" или "Trust and Launch", если такая доступна. **Однако, имейте в виду, что в некоторых средах рабочего стола этот запрос может повторяться при каждом запуске с рабочего стола.** Об этом подробнее в следующем разделе.

---

Добавление в системное меню приложений
--------------------------------------

Чтобы ваш ярлык появился в меню приложений (как и большинство установленных программ), его следует поместить в одну из стандартных директорий для файлов `.desktop`:

* **Для всех пользователей системы:**
    .. code-block:: bash

        sudo cp ~/Desktop/glade_example.desktop /usr/share/applications/

    Это сделает ярлык доступным для всех пользователей на компьютере.

* **Только для текущего пользователя:**
    .. code-block:: bash

        mkdir -p ~/.local/share/applications
        cp ~/Desktop/glade_example.desktop ~/.local/share/applications/

    Эта опция предпочтительнее, если вы разрабатываете приложение для себя или не хотите, чтобы оно было доступно глобально.

После копирования файла `.desktop` в одну из этих директорий, ярлык появится в меню приложений (возможно, потребуется **перезагрузка сессии** пользователя или перезапуск рабочего стола, чтобы изменения вступили в силу и ярлык стал виден).

**Важное примечание:** При запуске приложения **из меню приложений** запрос "Execute File" **не появится**, так как файлы `.desktop` в этих системных директориях автоматически считаются доверенными. Это стандартный и рекомендуемый способ запуска установленных приложений в Linux.

---

Почему ярлык на рабочем столе запрашивает подтверждение?
---------------------------------------------------------

В некоторых окружениях рабочего стола (таких как LXDE/PIXEL в Raspberry Pi OS) существует разница в обработке `.desktop` файлов в зависимости от их расположения:

* **На рабочем столе (`~/Desktop`):** Файловый менеджер, управляющий рабочим столом, рассматривает файлы `.desktop` как потенциально исполняемые скрипты. Для повышения безопасности он может требовать явного подтверждения пользователя (диалог "Execute File") при каждом запуске, даже если файл уже помечен как исполняемый (`chmod +x`). Это сделано для предотвращения случайного запуска вредоносных файлов, скопированных на рабочий стол.
* **В системных директориях приложений (`~/.local/share/applications/` или `/usr/share/applications/`):** Эти директории являются **доверенными местами** для файлов `.desktop`. Когда вы помещаете ярлык сюда, система автоматически считает его легитимным приложением, и никаких дополнительных запросов безопасности при запуске не возникает.

Таким образом, для надежного и бесшовного запуска приложения **рекомендуется использовать ярлык из меню приложений**, переместив `.desktop` файл в `~/.local/share/applications/`.

---

Запуск с ярлыка с выводом в терминал (для отладки)
---------------------------------------------------

Иногда при запуске через ярлык бывает полезно видеть вывод программы в терминале для отладки, даже если `Terminal=false`. Это можно сделать, изменив строку `Exec=` в вашем `.desktop` файле следующим образом:

.. code-block:: ini

    Exec=sh -c "nohup /home/Alex/myprg/25/glade_example > /tmp/glade_example.log 2>&1 &"

* `sh -c "..."`: Запускает команду в новой оболочке.
* `nohup`: Гарантирует, что процесс не будет завершен при закрытии терминала, из которого вы могли бы его запустить вручную.
* `> /tmp/glade_example.log 2>&1`: Перенаправляет весь стандартный вывод (`stdout`) и ошибки (`stderr`) в файл `/tmp/glade_example.log`. Вы можете выбрать любое другое имя и путь для лог-файла.
* `&`: Запускает команду в фоновом режиме, не блокируя терминал.

Этот метод позволяет вашему приложению запускаться как обычное GUI-приложение, но при этом все сообщения `g_print()` и другие выводы будут сохраняться в указанном лог-файле для последующего анализа. При этом **терминал сам по себе не будет открываться**.

---

Заключение
----------

Теперь ваше GTK-приложение можно запускать, как любое другое установленное ПО — прямо из меню, с рабочего стола или через встроенный поиск приложений вашей рабочей среды. Это значительно повышает удобство использования и интеграцию вашего приложения в систему.

---